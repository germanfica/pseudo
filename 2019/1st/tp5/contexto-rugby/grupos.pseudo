ALGORITMO principal() RETORNA Ø
	(* Cerebro *)
	TEXTO[] escuelas ← {"Los Patos", "Marabunta", "RRC", "NRC", "ARC"}
	TEXTO[] categorias ← {"M4", "M6", "M7", "M8", "M10"}
	CARACTER[][] matrizGrupo ← leerMatrizCaracter(longitud(escuelas), longitud(categorias))
	LOGICO salir ← FALSO
	ENTERO opcion ← -1

	(* Menú *)
	MIENTRAS (NOT salir) HACER
		mostrarOpciones()
		LEER(opcion)
		SEGUN (opcion)
			0: salir ← VERDADERO
			1: mostrarOpcion1(CARACTER[][] matrizGrupo, TEXTO[] escuelas)
			2: mostrarOpcion2()
			3: mostrarOpcion3()
			4: mostrarOpcion4()
			5: mostrarOpcion5()
			∀o: ESCRIBIR("Opción inválida")
		FIN SEGUN
	FIN MIENTRAS
FIN ALGORITMO principal

MODULO esVocal(CARACTER ch) RETORNA LOGICO
	LOGICO rta (* respuesta *)
	
	SEGUN(aMinuscula(ch))
		'a': rta ← VERDADERO
		'e': rta ← VERDADERO
		'i': rta ← VERDADERO
		'o': rta ← VERDADERO
		'u': rta ← VERDADERO
		∀o: rta ← FALSO
	FIN SEGUN
	
	RETORNA rta
FIN MODULO esVocal

MODULO ganadores(CARACTER[][] matrizGrupo) RETORNA CARACTER[][]
(* Los grupos a los que les tocó una vocal se han ganado un premio. Identificarlos y
reemplazar las vocales por ‘*' *)
	CARACTER[][] matrizPremio
	
	PARA i ← 0 HASTA longitud(matrizGrupo) CON PASO 1 HACER
		PARA j ← 0 HASTA longitud(matrizGrupo[0]) CON PASO 1 HACER
			SI(esVocal(matrizPremio[i][j])) ENTONCES
				matrizPremio[i][j] ← '*'
			FIN SI
		FIN PARA
	FIN PARA
	
	RETORNA matrizPremio
FIN MODULO ganadores

MODULO posicionCategoria(TEXTO[] categorias, TEXTO categoria) RETORNAR ENTERO
	(* Retorna la posición del arreglo de categorias si existe la categoria solicitada *)
	ENTERO i ← 0
	ENTERO posicion ← -1
	LOGICO salir ← FALSO
	
	MIENTRAS( NOT salir AND i <= longitud(categorias)-1 ) HACER
		SI(categoria=categorias[i]) ENTONCES
			posicion ← i
			salir ← VERDADERO
		FIN SI
		i ← i + 1
	FIN MIENTRAS
	(* si no existe retorna -1 *)
	RETORNA posicion
FIN MODULO posicionCategoria

(*
Dada una categoría, y una letra,

indicar si corresponde a alguna escuela.

¿Puede averiguar a qué escuela corresponde con una operación/instrucción
(esto es sin recorrer el arreglo)?
*)
MODULO correspondeEscuela(CARACTER[][] matrizGrupo, TEXTO[] categorias, TEXTO categoria, CARACTER letra) RETORNA LOGICO
	ENTERO i ← 0
	ENTERO posCategoria ← posicionCategoria(categorias, categoria)
	LOGICO aux ← FALSO
	LOGICO salir ← FALSO
	
	SI(posCategoria = -1) ENTONCES
		(* No existe la categoría *)
		aux ← FALSO
	SINO
		(* Buscar si existe la letra solicitada en la categoría solicitada en la matrizGrupo *)
		MIENTRAS( NOT salir AND i <= longitud(matrizGrupo)-1 ) HACER
			SI( letra = matrizGrupo[i][posCategoria] ) ENTONCES
				aux ← VERDADERO
				salir ← VERDADERO
			FIN SI
			i ← i + 1
		FIN MIENTRAS
	FIN SI
	
	RETORNA aux
FIN MODULO

https://www.techiedelight.com/create-spiral-matrix-given-array/

MODULO espiral(CARACTER[] grupos, ENTERO cantFilas, ENTERO cantColumnas) RETORNA CARACTER[][]
	CARACTER[][] matrizEspiral ← CARACTER[cantFilas][cantColumnas]
	
	ENTERO izquierda ← 0
	ENTERO derecha ← cantColumnas-1
	
	ENTERO arriba ← 0
	ENTERO abajo ← cantFilas-1
	
	ENTERO i
	ENTERO contador ← 0
	LOGICO salir ← FALSO
	
	MIENTRAS(NOT salir) HACER
		salir ← izquierda > derecha
		PARA i ← izquierda HASTA derecha CON PASO 1 HACER
			matrizEspiral[arriba][i] = grupos[contador]
			contador ← contador + 1
		FIN PARA
		arriba ← arriba + 1
		
		salir ← arriba > abajo
		PARA i ← arriba HASTA abajo CON PASO 1 HACER
			matrizEspiral[i][derecha] = grupos[contador]
			contador ← contador + 1
		FIN PARA
		derecha ← derecha -1
		
		salir ← izquierda > derecha
		PARA i ← derecha HASTA izquierda CON PASO -1 HACER
			matrizEspiral[abajo][i] = grupos[contador]
			contador ← contador + 1
		FIN PARA
		abajo ← abajo -1
		
		salir ← arriba > abajo
		PARA i ← abajo HASTA arriba CON PASO -1 HACER
			matrizEspiral[i][izquierda] = grupos[contador]
			contador ← contador + 1
		FIN PARA
		izquierda ← izquierda + 1
	FIN MIENTRAS
	
	RETORNA matrizEspiral
FIN MODULO 

MODULO mostrarOpciones() RETORNA Ø
	(* Muestra las las opciones disponibles *)
	ESCRIBIR("[0] Salir (IMPLEMENTADO)")
	ESCRIBIR("[1] Ingresar una escuela y mostrar las letras asignadas a los grupos de esa escuela.")
	ESCRIBIR("[2] Dada una categoría, y una letra, indicar si corresponde a alguna escuela. ¿Puede averiguar",
	"a qué escuela corresponde con una operación/instrucción (esto es sin recorrer el arreglo)?")
	ESCRIBIR("[3] Generar una cadena con todos los grupos, ordenado por escuela.")
	ESCRIBIR("[4] Mostrar los elementos de la matriz realizando un recorrido en espiral.")
	ESCRIBIR("[5] Los grupos a los que les tocó una vocal se han ganado un premio. Identificarlos y",
	"reemplazar las vocales por ‘*'")
FIN MODULO mostrarOpciones

(* Generar una cadena con todos los grupos, ordenado por escuela. *)
MODULO cadenaGrupos() RETORNA CARACTER[]
	CARACTER[] grupos
	ENTERO posArr ← 0
	
	PARA i ← 0 HASTA cantFilas-1 CON PASO 1 HACER
		PARA j ← 0 HASTA cantColumnas-1 CON PASO 1 HACER
			grupos[posArr] ← matrizCaracter[i][j]
			posArr ← posArr + 1
		FIN PARA
	FIN PARA
	
	RETORNAR grupos
FIN MODULO

MODULO leerMatrizCaracter(ENTERO cantFilas, ENTERO cantColumnas) RETORNA CARACTER[][]
	(* Este devuelve una matriz cargada de caracteres *)
	CARACTER[][] matrizCaracter ← CARACTER[cantFilas][cantColumnas]
	CARACTER ch
	ENTERO i, j
	PARA i ← 0 HASTA cantFilas-1 CON PASO 1 HACER
		PARA j ← 0 HASTA cantColumnas-1 CON PASO 1 HACER
			LEER(ch)
			matrizCaracter[i][j] ← ch
		FIN PARA
	FIN PARA
	RETORNAR matrizCaracter
FIN MODULO leerMatrizCaracter