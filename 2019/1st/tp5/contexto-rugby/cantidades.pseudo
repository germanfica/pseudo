ALGORITMO principal() RETORNA Ø
	(* Cerebro *)
	TEXTO[] escuelas ← {"Los Patos", "Marabunta", "RRC", "NRC", "ARC"}
	TEXTO[] categorias ← {"M4", "M6", "M7", "M8", "M10"}
	ENTERO[][] matrizCantidad ← leerMatrizEntero(longitud(cantEscuelas), longitud(cantCategorias))
	LOGICO salir ← FALSO
	ENTERO opcion ← -1

	(* Menú *)
	MIENTRAS (NOT salir) HACER
		mostrarOpciones()
		LEER(opcion)
		SEGUN (opcion)
			0: salir ← VERDADERO
			1: mostrarOpcion1(matrizCantidad)
			2: mostrarOpcion2(matrizCantidad, escuelas)
			3: mostrarCatEscGrupInc(matrizCantidad, escuelas, categorias)
			4: mostrarPromAlumPorCat(matrizCantidad, categorias)
			5: mostrarGrupMasGrandConCatEsc(matrizCantidad, escuelas, categorias)
			6: mostrarGrupMasPequeConCatEsc(matrizCantidad, escuelas, categorias)
			∀o: ESCRIBIR("Opción inválida")
		FIN SEGUN
	FIN MIENTRAS
FIN ALGORITMO principal

MODULO cantMayorIgualA(ENTERO num, ENTERO[][] numeros) RETORNA Ø
	ENTERO i, j, contador
	
	PARA i ← 0 HASTA longitud(numeros[0])-1 CON PASO 1 HACER
		PARA j ← 0 HASTA longitud(numeros)-1 CON PASO 1 HACER
			cantActual ← cantidadChicos[i][j]
			SI(cantActual >= num) ENTONCES
				contador ← contador + 1
			FIN SI
		FIN PARA
	FIN PARA
	
	RETORNAR contador
FIN MODULO

(*
	message
	msg
	mensaje
	msj
	crear una variable TEXTO cuerpMensaje
	y un ESCRIBIR(cuerpoMensaje) arriba del matrizEntero
*)
MODULO leerMatrizEntero(ENTERO cantFilas, ENTERO cantColumnas) RETORNA ENTERO[][]
	(* Este devuelve una matriz cargada de numeros enteros *)
	ENTERO[][] matrizEntero ← ENTERO[cantFilas][cantColumnas]
	ENTERO i, j, num
	PARA i ← 0 HASTA cantFilas-1  HACER
		PARA j ← 0 HASTA cantColumnas-1 HACER
			LEER(num)
			matrizEntero[i][j] ← num (* Ingresa el número a la matriz de enteros *)
		FIN PARA
	FIN PARA
	RETORNAR matrizEntero
FIN MODULO leerMatrizEntero

MODULO cantidadAlumnosPorEscuela(ENTERO[][] matrizCantidad) RETORNA ENTERO[]
	(* b) Cantidad de alumnos por escuela. ¿Qué porcentaje representa del total? *)
	ENTERO i, j, cantAlumnos
	ENTERO[] cantAlumPorEsc ← ENTERO[longitud(escuelas[0])]
	
	PARA i ← 0 HASTA longitud(matrizCantidad[0])-1 CON PASO 1 HACER
		cantAlumnos ← 0
		PARA j ← 0 HASTA longitud(matrizCantidad)-1 CON PASO 1 HACER
			cantAlumnos ← cantAlumnos + matrizCantidad[i][j]
		FIN PARA
		cantAlumPorEsc[i] ← cantAlumnos (* Cantidad de alumnos de una escuela *)
	FIN PARA
	RETORNAR cantAlumPorEsc
FIN MODULO

MODULO mostrarOpcion1(ENTERO[][] matrizCantidad) RETORNA Ø
	(* a) Cantidad de grupos de más de 7 niños. ¿Qué porcentaje representa del total de grupos? *)
	(* Opcion 1 *)
	ENTERO totalGrupos ← longitud(matrizCantidad[0]) * longitud(matrizCantidad)
	ENTERO cantGruposCompletos ← cantMayorIgualA(7, matrizCantidad)
	ENTERO porcentaje ← cantGruposCompletos/totalGrupos (* Promedio de grupos *)
	
	ESCRIBIR("La cantidad de grupos que tienen más 7 niños son: ", cantGruposCompletos) (* Con salto *)
	ESCRIBIR("Y representa el porcentaje: ", porcentaje, "%") (* Con salto *)
FIN MODULO mostrarOpcion1

MODULO mostrarOpcion2(ENTERO[][] matrizCantidad, ENTERO[] escuelas) RETORNA Ø
	(* b) Cantidad de alumnos por escuela. ¿Qué porcentaje representa del total? *)
	(* Opcion 2 *)
	ENTERO[] cantAlumnosPorEscuela ← cantidadAlumnosPorEscuela(matrizCantidad)
	ENTERO totalAlumnos ← 0
	ENTERO cantAlumnosActual, porcentaje
	
	ESCRIBIR("La cantidad de alumnos por escuela es: ")
	PARA i ← 0 HASTA totalEscuelas-1 CON PASO 1 HACER
		cantAlumnosActual ← cantAlumnosPorEscuela[i]
		ESCRIBIR("La escuela ", escuelas[i], " tiene ", cantAlumnosActual, " alumnos.")
		totalAlumnos ← totalAlumnos + cantAlumnosPorEscuela[i]
	FIN PARA
	
	porcentaje ← (cantAlumnosPorEscuela/totalEscuelas)*100
	ESCRIBIR("Y representa el porcentaje: ", porcentaje, "%")
FIN MODULO

MODULO mostrarCatEscGrupInc(ENTERO[][] matrizCantidad, TEXTO[] escuelas, TEXTO[] categorias) RETORNA Ø
	(* Opcion 3 *)
	ENTERO i,j
	ESCRIBIR("Los siguientes grupos son los que no llegan a armar un equipo de 7:")
	PARA i ← 0 HASTA longitud(matrizCantidad)-1 CON PASO 1 HACER
		PARA j ← 0 HASTA longitud(matrizCantidad[0])-1 CON PASO 1 HACER
			SI(matrizCantidad[i][j]<7) ENTONCES
				ESCRIBIR("Escuela: ", escuelas[i])
				ESCRIBIR("Categoria: ", categorias[j])
			FIN SI
		FIN PARA
	FIN PARA
FIN MODULO mostrarCatEscGrupInc

MODULO mostrarPromAlumPorCat(ENTERO[][] matrizCantidad, TEXTO[] categorias) RETORNA Ø
	(* Opcion 4 *)
	ENTERO totalAlumn, i, j
	REAL promedio
	PARA j ← 0 HASTA longitud(matrizCantidad[0])-1 CON PASO 1 HACER
		totalAlumn ← 0
		PARA i ← 0 HASTA longitud(matrizCantidad)-1 CON PASO 1 HACER
			totalAlumn ← totalAlumn + matrizCantidad[i][j]
		FIN PARA
		promedio ← totalAlumn/longitud(matrizCantidad[0])
		ESCRIBIR("El promedio de la categoría ", categorias[j], " es ", promedio)
	FIN PARA
FIN MODULO mostrarPromAlumPorCat

MODULO mostrarGrupMasGrandConCatEsc(ENTERO[][] matrizCantidad, TEXTO[] escuelas, TEXTO[] categorias) RETORNA Ø
	(* Opcion 5 *)
	ENTERO i,j
	ENTERO[][] grupoMasGrande ← ENTERO[3]
	grupoMasGrande[0] ← matrizCantidad[0][0] (* almacena la cantidad del grupo más grande *)
	grupoMasGrande[1] ← 0 (* almacena el i *)
	grupoMasGrande[2] ← 0 (* almacena el j *)
	PARA i ← 0 HASTA longitud(matrizCantidad)-1 CON PASO 1 HACER
		PARA j ← 0 HASTA longitud(matrizCantidad[0])-1 CON PASO 1 HACER
			SI(matrizCantidad[i][j]>grupoMasGrande[0]) ENTONCES
				grupoMasGrande[0] ← matrizCantidad[i][j] (* almacena la cantidad del grupo más grande *)
				grupoMasGrande[1] ← i (* almacena las pos i *)
				grupoMasGrande[2] ← j (* almacena las pos j *)
			FIN SI
		FIN PARA
	FIN PARA
	ESCRIBIR("El grupo más grande es:") (* con salto *)
	ESCRIBIR("Escuela: ", escuelas[grupoMasGrande[1]]) (* con salto *)
	ESCRIBIR("Categoria: ", categorias[grupoMasGrande[2]]) (* con salto *)
FIN MODULO mostrarGrupMasGrandConCatEsc

MODULO mostrarGrupMasPequeConCatEsc(ENTERO[][] matrizCantidad, TEXTO[] escuelas) RETORNA Ø
	(* Opcion 6 *)
	ENTERO i,j
	ENTERO[][] grupoMasPeque ← ENTERO[3]
	grupoMasPeque[0] ← matrizCantidad[0][0] (* almacena la cantidad del grupo más grande *)
	grupoMasPeque[1] ← 0 (* almacena el i *)
	grupoMasPeque[2] ← 0 (* almacena el j *)
	PARA i ← 0 HASTA longitud(matrizCantidad)-1 CON PASO 1 HACER
		PARA j ← 0 HASTA longitud(matrizCantidad[0])-1 CON PASO 1 HACER
			SI(matrizCantidad[i][j]<grupoMasPeque[0]) ENTONCES
				grupoMasPeque[0] ← matrizCantidad[i][j] (* almacena la cantidad del grupo más grande *)
				grupoMasPeque[1] ← i (* almacena las pos i *)
				grupoMasPeque[2] ← j (* almacena las pos j *)
			FIN SI
		FIN PARA
	FIN PARA
	ESCRIBIR("El grupo más pequeño es:") (* con salto *)
	ESCRIBIR("Escuela: ", escuelas[grupoMasPeque[1]]) (* con salto *)
	ESCRIBIR("Categoria: ", categorias[grupoMasPeque[2]]) (* con salto *)
FIN MODULO mostrarGrupMasPequeConCatEsc

MODULO mostrarOpciones() RETORNA Ø
	(* Muestra las las opciones disponibles *)
	ESCRIBIR("[0] Salir (IMPLEMENTADO)")
	ESCRIBIR("[1] Cantidad y porcentaje de grupos que tienen más de 7 niños del total. (IMPLEMENTADO)")
	ESCRIBIR("[2] Cantidad y porcentaje de alumnos por escuela del total. (IMPLEMENTADO)")
	ESCRIBIR("[3] ¿Qué categorías y de qué escuela no llegan a armar un grupo de 7 para jugar un partido?. (IMPLEMENTADO)")
	ESCRIBIR("[4] Promedio de alumnos por categoría. (IMPLEMENTADO)")
	ESCRIBIR("[5] El grupo más grande, indicando además la categoría y la escuela. (IMPLEMENTADO)")
	ESCRIBIR("[6] El grupo más pequeño, indicando además la categoría y la escuela. (IMPLEMENTADO)")
FIN MODULO mostrarOpciones

(* cantAnterior, cantActual *)
(* Devuelve una arreglo cargado de textos *)
(*
MODULO leerTextos(ENTERO cantTextos) RETORNA TEXTO[]
	TEXTO[] textos ← TEXTO[cantTextos]
	TEXTO texto;
	ENTERO i
	
	PARA i ← 0 HASTA cantTextos-1 CON PASO 1 HACER
		LEER(texto)
		textos[i] ← texto
	FIN PARA
	
	RETORNAR textos
FIN MODULO leerTextos
*)